{"ast":null,"code":"var _jsxFileName = \"/Users/max/repositories/test/cameratest/camera/src/components/Camera2.js\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport Webcam from \"react-webcam\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst videoConstraints = {\n  width: 1280,\n  height: 720,\n  facingMode: \"user\"\n};\nconst Camera2 = () => {\n  _s();\n  console.log('Camera running');\n  const webcamRef = React.useRef(null);\n  const [imgSrc, setImgSrc] = React.useState(null);\n\n  // console.log('imgSrc', imgSrc);\n  const capture = React.useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImgSrc(imageSrc);\n    saveImage(imageSrc);\n  }, [webcamRef, setImgSrc]);\n  const saveImage = async imgSrc => {\n    try {\n      const response = await fetch(\"/api/upload\", {\n        method: \"POST\",\n        body: JSON.stringify({\n          image: imgSrc\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log('response', response);\n      if (response.ok) {\n        console.log(\"Image saved successfully\");\n      } else {\n        console.error(\"Image could not be saved\");\n      }\n    } catch (error) {\n      console.error(\"Error saving image:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Webcam, {\n    audio: false,\n    height: 300,\n    screenshotFormat: \"image/jpeg\",\n    width: 400,\n    videoConstraints: videoConstraints,\n    children: ({\n      getScreenshot\n    }) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        const imageSrc = getScreenshot();\n      },\n      children: \"Capture photo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Camera2, \"ESwUrLq+HE9liXlylGlqUDf3hvQ=\");\n_c = Camera2;\nexport default Camera2;\nvar _c;\n$RefreshReg$(_c, \"Camera2\");","map":{"version":3,"names":["React","useRef","Webcam","jsxDEV","_jsxDEV","videoConstraints","width","height","facingMode","Camera2","_s","console","log","webcamRef","imgSrc","setImgSrc","useState","capture","useCallback","imageSrc","current","getScreenshot","saveImage","response","fetch","method","body","JSON","stringify","image","headers","ok","error","audio","screenshotFormat","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/max/repositories/test/cameratest/camera/src/components/Camera2.js"],"sourcesContent":["import React, { useRef } from \"react\";\nimport Webcam from \"react-webcam\";\n\nconst videoConstraints = {\n    width: 1280,\n    height: 720,\n    facingMode: \"user\"\n};\n\nconst Camera2 = () => {\n\n    console.log('Camera running');\n    const webcamRef = React.useRef(null);\n    const [imgSrc, setImgSrc] = React.useState(null);\n\n    // console.log('imgSrc', imgSrc);\n    const capture = React.useCallback(() => {\n      const imageSrc = webcamRef.current.getScreenshot();\n      setImgSrc(imageSrc);\n      saveImage(imageSrc);\n    }, [webcamRef, setImgSrc]);\n\n      const saveImage = async (imgSrc) => {\n        try {\n          const response = await fetch(\"/api/upload\", {\n            method: \"POST\",\n            body: JSON.stringify({ image: imgSrc }),\n            headers: {\n              \"Content-Type\": \"application/json\",\n            },\n        });\n        console.log('response', response);\n\n          if (response.ok) {\n            console.log(\"Image saved successfully\");\n          } else {\n            console.error(\"Image could not be saved\");\n          }\n        } catch (error) {\n          console.error(\"Error saving image:\", error);\n        }\n      };\n\n    return (\n        <Webcam\n            audio={false}\n            height={300}\n            screenshotFormat=\"image/jpeg\"\n            width={400}\n            videoConstraints={videoConstraints}\n        >\n            {({ getScreenshot }) => (\n                <button\n                    onClick={() => {\n                        const imageSrc = getScreenshot()\n                    }}\n                >\n                    Capture photo\n                </button>\n            )}\n        </Webcam>\n    );\n\n}\n\nexport default Camera2;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,OAAOC,MAAM,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,gBAAgB,GAAG;EACrBC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE,GAAG;EACXC,UAAU,EAAE;AAChB,CAAC;AAED,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAElBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;EAC7B,MAAMC,SAAS,GAAGb,KAAK,CAACC,MAAM,CAAC,IAAI,CAAC;EACpC,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGf,KAAK,CAACgB,QAAQ,CAAC,IAAI,CAAC;;EAEhD;EACA,MAAMC,OAAO,GAAGjB,KAAK,CAACkB,WAAW,CAAC,MAAM;IACtC,MAAMC,QAAQ,GAAGN,SAAS,CAACO,OAAO,CAACC,aAAa,CAAC,CAAC;IAClDN,SAAS,CAACI,QAAQ,CAAC;IACnBG,SAAS,CAACH,QAAQ,CAAC;EACrB,CAAC,EAAE,CAACN,SAAS,EAAEE,SAAS,CAAC,CAAC;EAExB,MAAMO,SAAS,GAAG,MAAOR,MAAM,IAAK;IAClC,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,aAAa,EAAE;QAC1CC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,KAAK,EAAEf;QAAO,CAAC,CAAC;QACvCgB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACJ,CAAC,CAAC;MACFnB,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEW,QAAQ,CAAC;MAE/B,IAAIA,QAAQ,CAACQ,EAAE,EAAE;QACfpB,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACzC,CAAC,MAAM;QACLD,OAAO,CAACqB,KAAK,CAAC,0BAA0B,CAAC;MAC3C;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdrB,OAAO,CAACqB,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC7C;EACF,CAAC;EAEH,oBACI5B,OAAA,CAACF,MAAM;IACH+B,KAAK,EAAE,KAAM;IACb1B,MAAM,EAAE,GAAI;IACZ2B,gBAAgB,EAAC,YAAY;IAC7B5B,KAAK,EAAE,GAAI;IACXD,gBAAgB,EAAEA,gBAAiB;IAAA8B,QAAA,EAElCA,CAAC;MAAEd;IAAc,CAAC,kBACfjB,OAAA;MACIgC,OAAO,EAAEA,CAAA,KAAM;QACX,MAAMjB,QAAQ,GAAGE,aAAa,CAAC,CAAC;MACpC,CAAE;MAAAc,QAAA,EACL;IAED;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ;EACX;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAGjB,CAAC;AAAA9B,EAAA,CAtDKD,OAAO;AAAAgC,EAAA,GAAPhC,OAAO;AAwDb,eAAeA,OAAO;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}